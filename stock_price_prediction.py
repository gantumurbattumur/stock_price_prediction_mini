# -*- coding: utf-8 -*-
"""stock_price_prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1HxTGtZa0t0NikwgkpqA7dn7njS3UK7L3
"""

import yfinance as yf
df = yf.download("AAPL", start="2015-01-01", end="2023-12-31")

from sklearn.preprocessing import MinMaxScaler
scaler = MinMaxScaler(feature_range=(0,1))
scaled_data = scaler.fit_transform(df[['Close']])

import numpy as np

X, y = [], []
for i in range(60, len(scaled_data)):
    X.append(scaled_data[i-60:i, 0])   # 60-day window
    y.append(scaled_data[i, 0])        # next day
X, y = np.array(X), np.array(y)
X = np.reshape(X, (X.shape[0], X.shape[1], 1))  # (samples, timesteps, features)

train_size = int(len(X) * 0.8)   # 80% train, 20% test

X_train, X_test = X[:train_size], X[train_size:]
y_train, y_test = y[:train_size], y[train_size:]

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense, Dropout

model = Sequential()
model.add(LSTM(50, return_sequences=True, input_shape=(X.shape[1], 1)))
model.add(Dropout(0.2))
model.add(LSTM(50, return_sequences=False))
model.add(Dropout(0.2))
model.add(Dense(25))
model.add(Dense(1))  # Predict 1 value (next day's price)

model.compile(optimizer='adam', loss='mean_absolute_error')

history = model.fit(X, y, batch_size=32, epochs=20)

predictions = model.predict(X_test)
predictions = scaler.inverse_transform(predictions.reshape(-1,1))

import matplotlib.pyplot as plt

plt.figure(figsize=(14,9))
plt.plot(df.index[-len(y_test):], scaler.inverse_transform(y_test.reshape(-1,1)), label="True Price")
plt.plot(df.index[-len(predictions):], predictions, label="Predicted Price")
plt.legend()
plt.show()

